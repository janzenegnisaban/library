generator client {
  provider = "prisma-client-js"
  output   = "../prisma-client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  email           String          @unique
  username        String
  mobile          String
  password        String
  createdAt       DateTime        @default(now())
  borrowedBooks   BorrowedBook[]
  overdueBooks    OverdueBook[]
  returnHistories ReturnHistory[]
}

model Book {
  id              Int             @id @default(autoincrement())
  title           String
  author          String
  isbn            String          @unique
  category        String
  addedAt         DateTime        @default(now())
  donatedBy       String?
  donatedAt       DateTime?
  coverImage      String?
  description     String
  quantity        Int
  status          BookStatus      @default(AVAILABLE)
  borrowedBooks   BorrowedBook[]
  donatedBooks    DonatedBook[]
  overdueBooks    OverdueBook[]
  returnHistories ReturnHistory[]
}

model BorrowedBook {
  id         Int       @id @default(autoincrement())
  bookId     Int
  userId     Int
  username   String
  borrowedAt DateTime  @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  isOverdue  Boolean   @default(false)
  book       Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OverdueBook {
  id        Int      @id @default(autoincrement())
  bookId    Int
  userId    Int
  username  String
  overdueAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ReturnHistory {
  id         Int      @id @default(autoincrement())
  bookId     Int
  userId     Int
  returnedAt DateTime @default(now())
  book       Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DonatedBook {
  id        Int      @id @default(autoincrement())
  bookId    Int
  donatedBy String
  donatedAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
}

model Query {
  id                Int      @id @default(autoincrement())
  userQuery         String
  assistantResponse String
  createdAt         DateTime @default(now())
}

enum BookStatus {
  AVAILABLE
  UNAVAILABLE
  BORROWED
  RESERVED
}