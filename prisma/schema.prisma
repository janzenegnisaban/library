generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  email         String          @unique
  username      String
  mobile        String
  password      String
  createdAt     DateTime        @default(now())
  borrowedBooks BorrowedBook[]
  overdueBooks  OverdueBook[]
  returnHistories ReturnHistory[]
}

model Book {
  id            Int             @id @default(autoincrement())
  title         String
  author        String
  isbn          String          @unique
  category      String
  addedAt       DateTime        @default(now())
  donatedBy     String?
  donatedAt     DateTime?
  borrowedBooks BorrowedBook[]
  overdueBooks  OverdueBook[]
  returnHistories ReturnHistory[]
  donatedBooks  DonatedBook[]
}

model BorrowedBook {
  id         Int       @id @default(autoincrement())
  bookId     Int
  userId     Int
  borrowedAt DateTime  @default(now())
  dueDate    DateTime
  returnedAt DateTime?
  isOverdue  Boolean   @default(false)
  book       Book      @relation(fields: [bookId], references: [id])
  user       User      @relation(fields: [userId], references: [id])
}

model OverdueBook {
  id        Int      @id @default(autoincrement())
  bookId    Int
  userId    Int
  overdueAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ReturnHistory {
  id         Int      @id @default(autoincrement())
  bookId     Int
  userId     Int
  returnedAt DateTime @default(now())
  book       Book     @relation(fields: [bookId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model DonatedBook {
  id         Int      @id @default(autoincrement())
  bookId     Int
  donatedBy  String
  donatedAt  DateTime @default(now())
  book       Book     @relation(fields: [bookId], references: [id])
}